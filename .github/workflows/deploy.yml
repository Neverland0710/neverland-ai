name: Deploy Neverland AI to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CONTAINER_NAME: neverland-ai
  IMAGE_NAME: neverland-ai
  APP_PORT: 8000

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: SSH & Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        port: 22
        timeout: 600s
        command_timeout: 120s
        script: |
          set -e
          
          echo " Neverland AI 배포 시작..."
          echo " 시작 시간: $(date)"
          
          # Docker 버전 확인
          echo " Docker 버전 확인:"
          docker --version
          
          # Git 설정 초기화 (에러 방지)
          git config --global --unset-all core.sshCommand || true
          git config --global --unset-all http.https://github.com/.extraheader || true
          git config --global user.name "EC2 Deploy Bot" || true
          git config --global user.email "deploy@neverland.ai" || true
          
          # 프로젝트 디렉토리 관리
          PROJECT_DIR="$HOME/neverland-ai"
          
          # 기존 디렉토리가 있으면 완전히 삭제하고 새로 클론
          if [ -d "$PROJECT_DIR" ]; then
            echo " 기존 프로젝트 디렉토리 삭제 중..."
            rm -rf "$PROJECT_DIR"
          fi
          
          echo " 새 프로젝트 클론 중..."
          git clone https://github.com/Neverland0710/neverland-ai.git "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          
          echo " 소스코드 다운로드 완료"
          
          # 환경변수 파일 생성
          echo " 환경변수 설정 중..."
          cat > .env << 'EOF'
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          QDRANT_URL=${{ secrets.QDRANT_URL }}
          QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}
          DAILY_COLLECTION=${{ secrets.DAILY_COLLECTION }}
          LETTER_COLLECTION=${{ secrets.LETTER_COLLECTION }}
          OBJECT_COLLECTION=${{ secrets.OBJECT_COLLECTION }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          ELEVENLABS_API_KEY=${{ secrets.ELEVENLABS_API_KEY }}
          LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}
          LANGSMITH_ENDPOINT=${{ secrets.LANGSMITH_ENDPOINT }}
          LANGSMITH_PROJECT=${{ secrets.LANGSMITH_PROJECT }}
          ENVIRONMENT=production
          DEBUG=false
          LOG_LEVEL=INFO
          EOF
          
          chmod 600 .env
          echo " 환경변수 파일 생성 완료"
          
          # 기존 컨테이너 정리
          echo "🧹 기존 서비스 정리 중..."
          
          # 실행 중인 컨테이너 강제 종료
          if docker ps -q --filter "name=${{ env.CONTAINER_NAME }}" | grep -q .; then
            echo "기존 컨테이너 강제 종료 중..."
            docker kill ${{ env.CONTAINER_NAME }} || true
            sleep 3
          fi
          
          # 컨테이너 삭제
          docker rm -f ${{ env.CONTAINER_NAME }} || true
          
          # 기존 이미지 삭제
          docker rmi -f ${{ env.IMAGE_NAME }} || true
          
          # Docker 시스템 정리
          docker system prune -f || true
          
          echo " 기존 리소스 정리 완료"
          
          # Dockerfile 존재 확인
          if [ ! -f "Dockerfile" ]; then
            echo " Dockerfile이 존재하지 않습니다!"
            echo "현재 디렉토리 내용:"
            ls -la
            exit 1
          fi
          
          echo " Dockerfile 확인 완료"
          
          # Docker 버전별 빌드 명령어 선택
          DOCKER_VERSION=$(docker --version | grep -oE '[0-9]+\.[0-9]+' | head -1)
          MAJOR_VERSION=$(echo $DOCKER_VERSION | cut -d. -f1)
          MINOR_VERSION=$(echo $DOCKER_VERSION | cut -d. -f2)
          
          echo " Docker 버전: $DOCKER_VERSION (Major: $MAJOR_VERSION, Minor: $MINOR_VERSION)"
          
          # Docker 이미지 빌드 (구버전 호환)
          echo " Docker 이미지 빌드 중..."
          
          # BuildKit 사용 가능 여부 확인 후 빌드
          if docker buildx version > /dev/null 2>&1; then
            echo "BuildKit 사용 가능 - 최신 빌드 방식 사용"
            docker buildx build -t ${{ env.IMAGE_NAME }} . --load
          else
            echo "레거시 Docker 빌드 사용"
            docker build -t ${{ env.IMAGE_NAME }} . --no-cache
          fi
          
          if [ $? -ne 0 ]; then
            echo " Docker 이미지 빌드 실패"
            echo "Docker 빌드 로그 확인을 위해 다시 시도..."
            docker build -t ${{ env.IMAGE_NAME }} .
            exit 1
          fi
          
          echo " Docker 이미지 빌드 완료"
          
          # 빌드된 이미지 확인
          echo " 빌드된 이미지 정보:"
          docker images | grep ${{ env.IMAGE_NAME }} || true
          
          # 컨테이너 실행
          echo " 새 컨테이너 시작 중..."
          docker run -d \
            -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
            --env-file .env \
            --restart unless-stopped \
            --name ${{ env.CONTAINER_NAME }} \
            --memory=2g \
            --cpus=1.0 \
            ${{ env.IMAGE_NAME }}
          
          if [ $? -ne 0 ]; then
            echo " 컨테이너 시작 실패"
            echo "Docker 로그 확인:"
            docker logs ${{ env.CONTAINER_NAME }} || true
            exit 1
          fi
          
          echo " 컨테이너 시작 대기 중..."
          sleep 20
          
          # 컨테이너 상태 확인
          echo " 컨테이너 상태 확인 중..."
          if ! docker ps --filter name=${{ env.CONTAINER_NAME }} --filter status=running -q | grep -q .; then
            echo " 컨테이너가 실행되지 않습니다"
            echo "컨테이너 상태:"
            docker ps -a --filter name=${{ env.CONTAINER_NAME }}
            echo ""
            echo "컨테이너 로그:"
            docker logs ${{ env.CONTAINER_NAME }} || true
            echo ""
            echo "시스템 리소스 확인:"
            free -h
            df -h
            exit 1
          fi
          
          echo " 컨테이너가 정상적으로 실행 중입니다"
          
          # 포트 헬스체크
          echo " 서비스 헬스체크 중..."
          for i in {1..30}; do
            echo "헬스체크 시도 $i/30..."
            
            # 포트 확인 (여러 방법 시도)
            if netstat -tuln 2>/dev/null | grep :${{ env.APP_PORT }} > /dev/null; then
              echo " 포트 ${{ env.APP_PORT }}에서 서비스가 정상 실행 중입니다!"
              break
            elif ss -tuln 2>/dev/null | grep :${{ env.APP_PORT }} > /dev/null; then
              echo " 포트 ${{ env.APP_PORT }}에서 서비스가 정상 실행 중입니다!"
              break
            elif docker port ${{ env.CONTAINER_NAME }} 2>/dev/null | grep -q ${{ env.APP_PORT }}; then
              echo " Docker 포트 매핑이 정상입니다!"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo " 헬스체크 실패 - 포트가 열리지 않았습니다"
              echo ""
              echo " 디버깅 정보:"
              echo "컨테이너 포트 정보:"
              docker port ${{ env.CONTAINER_NAME }} || true
              echo ""
              echo "네트워크 상태:"
              netstat -tuln | grep ${{ env.APP_PORT }} || echo "netstat에서 포트를 찾을 수 없음"
              ss -tuln | grep ${{ env.APP_PORT }} || echo "ss에서 포트를 찾을 수 없음"
              echo ""
              echo "컨테이너 로그 (마지막 50줄):"
              docker logs ${{ env.CONTAINER_NAME }} --tail 50
              exit 1
            fi
            
            sleep 3
          done
          
          # API 테스트 (curl이 설치되어 있다면)
          if command -v curl > /dev/null 2>&1; then
            echo " API 응답 테스트 중..."
            sleep 5  # 추가 대기
            
            if curl -f --connect-timeout 10 --max-time 30 http://localhost:${{ env.APP_PORT }}/health > /dev/null 2>&1; then
              echo " API 헬스체크 성공!"
            elif curl -f --connect-timeout 10 --max-time 30 http://localhost:${{ env.APP_PORT }}/ > /dev/null 2>&1; then
              echo " 기본 엔드포인트 접근 성공!"
            else
              echo " API 헬스체크 실패 (서비스는 실행 중일 수 있음)"
              echo "수동으로 http://${{ secrets.EC2_HOST }}:${{ env.APP_PORT }} 확인 필요"
            fi
          else
            echo " curl이 설치되지 않음 - API 테스트 건너뜀"
          fi
          
          # 배포 완료 정보
          echo ""
          echo " 배포 완료!"
          echo " 완료 시간: $(date)"
          echo ""
          echo " 서비스 정보:"
          echo " 컨테이너 상태:"
          docker ps --filter name=${{ env.CONTAINER_NAME }} --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true
          echo ""
          echo " 리소스 사용량:"
          docker stats ${{ env.CONTAINER_NAME }} --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" || true
          echo ""
          echo " 서비스 접속 정보:"
          echo "   - 내부: http://localhost:${{ env.APP_PORT }}"
          echo "   - 외부: http://${{ secrets.EC2_HOST }}:${{ env.APP_PORT }}"
          echo ""
          echo " Neverland AI가 정상적으로 배포되었습니다!"

    - name: Deployment Result
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo " 배포 성공!"
          echo " Neverland AI가 EC2에서 정상적으로 실행 중입니다."
          echo " 서비스 URL: http://${{ secrets.EC2_HOST }}:8000"
        else
          echo " 배포 실패!"